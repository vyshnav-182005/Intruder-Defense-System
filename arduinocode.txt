#include <Servo.h>
#include <math.h>

Servo baseServo;  // Yaw (base rotation)
Servo tiltServo;  // Pitch (up/down)
Servo motor;      // Motor (jumps between 0° and 45°)

const int basePin = 9;   // Yaw servo (base rotation)
const int tiltPin = 8;   // Pitch servo (up/down)
const int motorPin = 10; // Motor for jumping between 0° and 45°
const int dcMotorPin = 12; // DC motor control

bool motorState = false;      // Toggle state for motor servo
bool dcMotorState = false;    // Toggle state for DC motor
unsigned long lastToggleTime = 0; // For DC motor timing

void setup() {
  Serial.begin(9600);
  baseServo.attach(basePin);
  tiltServo.attach(tiltPin);
  motor.attach(motorPin);
  pinMode(dcMotorPin, OUTPUT);

  // Initial positions
  baseServo.write(90);  // Facing forward
  tiltServo.write(110); // New center position
  motor.write(0);       // Start at 0 degrees
  digitalWrite(dcMotorPin, HIGH); // DC motor off

  Serial.println("Enter target coordinates (X Y Z) in the range [-1,1]:");
}

void loop() {
  // Toggle motor between 0° and 45° every 1 second
  motorState = !motorState; 
  motor.write(motorState ? 45 : 0); 
  delay(1000); 

  // Handle DC motor toggling every 2 seconds (non-blocking)
  unsigned long currentTime = millis();
  if (currentTime - lastToggleTime >= 2000) {
    dcMotorState = !dcMotorState;
    digitalWrite(dcMotorPin, dcMotorState ? HIGH : LOW);
    lastToggleTime = currentTime;
  }

  // Check if there's new coordinate input
  if (Serial.available()) {
    float x = Serial.parseFloat();
    float y = Serial.parseFloat();
    float z = Serial.parseFloat();

    Serial.print("Received: X=");
    Serial.print(x);
    Serial.print(" Y=");
    Serial.print(y);
    Serial.print(" Z=");
    Serial.println(z);

    z = -z;

    float magnitude = sqrt(x*x + y*y + z*z);
    if (magnitude > 1.0) {
      x /= magnitude;
      y /= magnitude;
      z /= magnitude;

      Serial.println("Input was not normalized. Normalizing...");
      Serial.print("Normalized: X=");
      Serial.print(x);
      Serial.print(" Y=");
      Serial.print(y);
      Serial.print(" Z=");
      Serial.println(z);
    }

    float yawAngle = atan2(y, x) * 180.0 / PI;
    yawAngle = constrain(yawAngle + 90, 20, 160);

    float distance = sqrt(x*x + y*y);
    float pitchAngle = atan2(z, distance) * 180.0 / PI;
    pitchAngle = constrain(110 - pitchAngle, 80, 180);

    baseServo.write(yawAngle);
    tiltServo.write(pitchAngle);

    Serial.print("Yaw Angle: ");
    Serial.print(yawAngle);
    Serial.print(" | Pitch Angle: ");
    Serial.println(pitchAngle);

    delay(500);
  }
}
